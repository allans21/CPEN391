#include <stdio.h>
#include "wifi.h"

#define RS232_ReceiverFifo        ((volatile unsigned char *)(0xFF210200))
#define RS232_TransmitterFifo     ((volatile unsigned char *)(0xFF210200))
#define RS232_InterruptEnableReg  ((volatile unsigned char *)(0xFF210202))
#define RS232_InterruptIdentificationReg ((volatile unsigned char *)(0xFF210204))
#define RS232_FifoControlReg ((volatile unsigned char *)(0xFF210204))
#define RS232_LineControlReg ((volatile unsigned char *)(0xFF210206))
#define RS232_ModemControlReg ((volatile unsigned char *)(0xFF210208))
#define RS232_LineStatusReg ((volatile unsigned char *)(0xFF21020A))
#define RS232_ModemStatusReg ((volatile unsigned char *)(0xFF21020C))
#define RS232_ScratchReg ((volatile unsigned char *)(0xFF21020E))
#define RS232_DivisorLatchLSB ((volatile unsigned char *)(0xFF210200))
#define RS232_DivisorLatchMSB ((volatile unsigned char *)(0xFF210202))

#define TRUE 1
#define FALSE 0
/**************************************************************************
/* Subroutine to initialise the RS232 Port by writing some data
** to the internal registers.
** Call this function at the start of the program before you attempt
** to read or write to data via the RS232 port
**
** Refer to UART data sheet for details of registers and programming
***************************************************************************/

SerialConf *create_serial_conf(
		volatile void * virtual_base,
		volatile void * ReceiverFifo,
		volatile void * TransmitterFifo,
		volatile void * InterruptEnableReg,
		volatile void * InterruptIdentificationReg,
		volatile void * FifoControlReg,
		volatile void * LineControlReg,
		volatile void * ModemControlReg,
		volatile void * LineStatusReg,
		volatile void * ModemStatusReg,
		volatile void * ScratchReg,
		volatile void * DivisorLatchLSB,
		volatile void * DivisorLatchMSB){
	SerialConf * sc = malloc(sizeof(SerialConf));
	sc->ReceiverFifo               = virtual_base + (unsigned int)(ReceiverFifo - 0xFF200000);
	sc->TransmitterFifo            = virtual_base + (unsigned int)(TransmitterFifo - 0xFF200000);
	sc->InterruptEnableReg         = virtual_base + (unsigned int)(InterruptEnableReg - 0xFF200000);
	sc->InterruptIdentificationReg = virtual_base + (unsigned int)(InterruptIdentificationReg - 0xFF200000);
	sc->FifoControlReg             = virtual_base + (unsigned int)(FifoControlReg - 0xFF200000);
	sc->LineControlReg             = virtual_base + (unsigned int)(LineControlReg - 0xFF200000);
	sc->ModemControlReg            = virtual_base + (unsigned int)(ModemControlReg - 0xFF200000);
	sc->LineStatusReg              = virtual_base + (unsigned int)(LineStatusReg - 0xFF200000);
	sc->ModemStatusReg             = virtual_base + (unsigned int)(ModemStatusReg - 0xFF200000);
	sc->ScratchReg                 = virtual_base + (unsigned int)(ScratchReg - 0xFF200000);
	sc->DivisorLatchLSB            = virtual_base + (unsigned int)(DivisorLatchLSB - 0xFF200000);
	sc->DivisorLatchMSB            = virtual_base + (unsigned int)(DivisorLatchMSB - 0xFF200000);
	return sc;
}

int putchar_uart (int  , volatile unsigned char *  ,  volatile unsigned char * );
int getchar_uart( volatile unsigned char *  ,  volatile unsigned char *   );
int TestForReceivedData(volatile unsigned char *  );
void Flush( volatile unsigned char *   , volatile unsigned char *  );


SerialConf* Init_WiFi(void *virtual_base)
{
	SerialConf *sc = create_serial_conf(virtual_base,
		RS232_ReceiverFifo, RS232_TransmitterFifo,
		RS232_InterruptEnableReg, RS232_InterruptIdentificationReg,
		RS232_FifoControlReg, RS232_LineControlReg, RS232_ModemControlReg,
		RS232_LineStatusReg, RS232_ModemStatusReg, RS232_ScratchReg,
		RS232_DivisorLatchLSB, RS232_DivisorLatchMSB);

	// set bit 7 of Line Control Register to 1, to gain access to the baud rate registers
	unsigned char line_control_register;
	line_control_register = *(sc->LineControlReg);
	line_control_register = line_control_register |  0x80;
	*(sc->LineControlReg) = line_control_register;
	*(sc->DivisorLatchLSB) = 0x1B;
	*(sc->DivisorLatchMSB) = 0x00;
	// set bit 7 of Line control register back to 0 and
	// program other bits in that reg for 8 bit data,
	// 1 stop bit, no parity etc
	//0000 0011
	*(sc->LineControlReg) = 0x03;
	// Reset the Fifo’s in the FiFo Control Reg by setting bits 1 & 2
	*(sc->FifoControlReg) = *(sc->FifoControlReg) | 0x06;
	// Now Clear all bits in the FiFo control registers
	*(sc->FifoControlReg) = *(sc->FifoControlReg) ^  0x06;
	Flush(sc->LineStatusReg, sc->ReceiverFifo);
	char buf[10240] = "";
	exec_lua(sc, "dofile(\"send_text_message.lua\")", buf);

	char c;
	int got=0;
	char *expected = "connected";
	while (got < 9) {
		while(TestForReceivedData(sc->LineStatusReg) != 1) {;}
		c = (char) getchar_uart(sc->LineStatusReg, sc->ReceiverFifo);
		printf("%c", c);
		if (c == expected[got]) {
			got += 1;
		}
	}
	printf("\n");

	return sc;
}


int putchar_uart(int c, volatile unsigned char *  LineStatusReg ,  volatile unsigned char *  TransmitterFifo)
{
 // wait for Transmitter Holding Register bit (5) of line status register to be '1'
 // indicating we can write to the device
 while ( (*LineStatusReg & 0x20)!= 0x20){
;
 }
 *TransmitterFifo = (unsigned char)c;
// write character to Transmitter fifo register
return c;
// return the character we printed

}
int getchar_uart( volatile unsigned char *  LineStatusReg ,  volatile unsigned char *  ReceiverFifo )
{

  while ( (*LineStatusReg & 0x01)!= 0x01){

 ;
  }
 // wait for Data Ready bit (0) of line status register to be '1'
 // read new character from ReceiverFiFo register
 return (int) *ReceiverFifo;
 // return new character
}

// the following function polls the UART to determine if any character
// has been received. It doesn't wait for one, or read it, it simply tests
// to see if one is available to read from the FIFO
int TestForReceivedData(volatile unsigned char *  LineStatusReg)
{
 // if RS232_LineStatusReg bit 0 is set to 1
 if((*LineStatusReg & 0x01)== 0x01)
 return TRUE;
 else
 return FALSE;
 //return TRUE, otherwise return FALSE
}
//
// Remove/flush the UART receiver buffer by removing any unread characters
//
void Flush( volatile unsigned char *  LineStatusReg , volatile unsigned char *  ReceiverFifo)
{
 // while bit 0 of Line Status Register == ‘1’
 // read unwanted char out of fifo receiver buffer
 // return; // no more characters so return
 int garbage;
while ( (*LineStatusReg & 0x01)== 0x01){
  garbage =  *ReceiverFifo;
}

}


// END COPY PASTE




//int _main() {
//	Init_WiFi();
//	char buf[1024] = "";
//
//	printf("Sending to dangle dongle\n");
//	int res = exec_lua("dofile(\"send_text_message.lua\")", buf);
//	printf("%s\n", buf);
//
//	char c;
//	int got=0;
//	char *expected = "connected";
//	while (got < 9) {
//		while(TestForReceivedData(RS232_LineStatusReg) != 1) {;}
//		c = (char) getchar_uart(RS232_LineStatusReg, RS232_ReceiverFifo);
//		printf("%c", c);
//		if (c == expected[got]) {
//			got += 1;
//		}
//	}
//	printf("\n");
//
//	res = exec_lua("send_sms(\"(204) 818-9230\",\"(778) 866-2529\",\"WiFi Chip ON!\")", buf);
//	printf("%s\n", buf);
//
//	while (1) {
//		if(TestForReceivedData(RS232_LineStatusReg) == 1) {
//			c = (char) getchar_uart(RS232_LineStatusReg, RS232_ReceiverFifo);
//			printf("%c", c);
//		}
//	}
//}

int exec_lua(SerialConf *sc, char * str, char * res) {
	int i;
	int bytes_received = 0;
//	printf("executing %s as a Lua command\n", str);
	while (*str) {
		putchar_uart(*str, sc->LineStatusReg, sc->TransmitterFifo);
		for (i=0; i < 10000; i++){}
		while(TestForReceivedData(sc->LineStatusReg) == 1) {
			char c = (char) getchar_uart(sc->LineStatusReg, sc->ReceiverFifo);
            printf("%c", c);
		}
		str += 1;
	}
	putchar_uart('\n', sc->LineStatusReg , sc->TransmitterFifo);
//	while(TestForReceivedData(sc->LineStatusReg) == 1) {
//		char c = (char) getchar_uart(sc->LineStatusReg, sc->ReceiverFifo);
//		printf("%c", c);
//	}
    for(i = 0; i < 200000; i++) {
        if(TestForReceivedData(sc->LineStatusReg) == 1) {
        	res[bytes_received++] = (char) getchar_uart(sc->LineStatusReg, sc->ReceiverFifo);
            i = 0 ; // reset timer if we got something back
        }
    }
	printf("Got %u bytes\n", bytes_received);
	res[bytes_received] = '\0';
	return bytes_received;
}
