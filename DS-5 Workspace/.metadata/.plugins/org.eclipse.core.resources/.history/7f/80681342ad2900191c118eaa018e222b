SerialConf *create_serial_conf(
		volatile void * virtual_base,
		volatile void * ReceiverFifo,
		volatile void * TransmitterFifo,
		volatile void * InterruptEnableReg,
		volatile void * InterruptIdentificationReg,
		volatile void * FifoControlReg,
		volatile void * LineControlReg,
		volatile void * ModemControlReg,
		volatile void * LineStatusReg,
		volatile void * ModemStatusReg,
		volatile void * ScratchReg,
		volatile void * DivisorLatchLSB,
		volatile void * DivisorLatchMSB){
	SerialConf * sc = malloc(sizeof(SerialConf));
	sc->ReceiverFifo               = virtual_base + (unsigned int)(ReceiverFifo - 0xFF200000);
	sc->TransmitterFifo            = virtual_base + (unsigned int)(TransmitterFifo - 0xFF200000);
	sc->InterruptEnableReg         = virtual_base + (unsigned int)(InterruptEnableReg - 0xFF200000);
	sc->InterruptIdentificationReg = virtual_base + (unsigned int)(InterruptIdentificationReg - 0xFF200000);
	sc->FifoControlReg             = virtual_base + (unsigned int)(FifoControlReg - 0xFF200000);
	sc->LineControlReg             = virtual_base + (unsigned int)(LineControlReg - 0xFF200000);
	sc->ModemControlReg            = virtual_base + (unsigned int)(ModemControlReg - 0xFF200000);
	sc->LineStatusReg              = virtual_base + (unsigned int)(LineStatusReg - 0xFF200000);
	sc->ModemStatusReg             = virtual_base + (unsigned int)(ModemStatusReg - 0xFF200000);
	sc->ScratchReg                 = virtual_base + (unsigned int)(ScratchReg - 0xFF200000);
	sc->DivisorLatchLSB            = virtual_base + (unsigned int)(DivisorLatchLSB - 0xFF200000);
	sc->DivisorLatchMSB            = virtual_base + (unsigned int)(DivisorLatchMSB - 0xFF200000);
	return sc;
}
